{"version":3,"sources":["color.js","App.js","reportWebVitals.js","index.js"],"names":["colorArray","quoteURL","App","useState","quote","setQuote","author","setAuthor","quotesArray","setQuotesArray","newColor","setNewColor","fetchQuotes","url","a","fetch","response","json","parseJSON","quotes","useEffect","className","style","backgroundColor","color","id","icon","faQuoteLeft","href","encodeURI","faTwitter","onClick","randomInt","Math","floor","length","random","getRandomQuote","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAoBmBA,G,MApBF,CAAC,UAAW,UAAW,UAAW,UAAW,UAC1D,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,Y,8BCV5CC,EAAS,yIAwDEC,MArDf,WAAgB,IAAD,EACUC,mBAAS,uPADnB,mBACNC,EADM,KACAC,EADA,OAEYF,mBAAS,kBAFrB,mBAENG,EAFM,KAECC,EAFD,OAGwBJ,mBAAS,GAHjC,gCAIsBA,mBAAS,OAJ/B,mBAINK,EAJM,KAIMC,EAJN,OAKgBN,mBAAS,WALzB,mBAKNO,EALM,KAKGC,EALH,KAQPC,EAAW,uCAAE,WAAMC,GAAN,iBAAAC,EAAA,sEACMC,MAAMF,GADZ,cACXG,EADW,gBAEOA,EAASC,OAFhB,OAEXC,EAFW,OAGjBT,EAAeS,EAAUC,QAHR,2CAAF,sDAoBnB,OAZAC,qBAAU,WACRR,EAAYX,KACZ,CAACA,IAWD,qBAAKoB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAaC,MAAO,CACpCC,gBAAgBb,EAASc,MAAMd,GADjC,SAEA,sBAAKe,GAAG,YAAR,UACG,oBAAGA,GAAG,OAAN,UACA,cAAC,IAAD,CAAiBC,KAAMC,MADvB,OAC0CvB,KAC1C,oBAAGqB,GAAG,SAAN,eAAkBnB,KAClB,sBAAKe,UAAU,SAAf,UACI,mBAAGI,GAAG,cAAcH,MAAO,CACzBC,gBAAgBb,GAAYkB,KAAMC,UAAU,4CAAD,OAA6CzB,EAA7C,aAAuDE,IADpG,SAEE,cAAC,IAAD,CAAiBoB,KAAMI,QAEzB,wBAAQL,GAAG,YAAYM,QAAS,kBApBtB,WACnB,IAAIC,EAAUC,KAAKC,MAAM1B,EAAY2B,OAAOF,KAAKG,UACjD/B,EAASG,EAAYwB,GAAW5B,OAChCG,EAAUC,EAAYwB,GAAW1B,QACjCK,EAAYX,EAAWgC,IAgBsBK,IAClCf,MAAO,CACVC,gBAAgBb,GAFf,kCCzCI4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e6d4e55d.chunk.js","sourcesContent":["var colorArray = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \r\n\t\t  '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n\t\t  '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \r\n\t\t  '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\r\n\t\t  '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \r\n\t\t  '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\r\n\t\t  '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \r\n\t\t  '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\r\n\t\t  '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \r\n\t\t  '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF',\r\n\t\t  \"#027B7F\", \"#FFA588\", \"#D62957\", \"#BF1E62\", \"#572E4F\",\r\n\t\t  \"#80A8A8\", \"#909D9E\", \"#A88C8C\", \"#FF0D51\", \"#7A8C89\",\r\n\t\t  \"#A69E80\", \"#E0BA9B\", \"#E7A97E\", \"#D28574\", \"#3B1922\",\r\n\t\t  \"#A1DBB2\", \"#FEE5AD\", \"#FACA66\", \"#F7A541\", \"#F45D4C\",\r\n\t\t  \"#641F5E\", \"#676077\", \"#65AC92\", \"#C2C092\", \"#EDD48E\",\r\n\t\t  \"#FFF3DB\", \"#E7E4D5\", \"#D3C8B4\", \"#C84648\", \"#703E3B\",\r\n\t\t  \"#F5DD9D\", \"#BCC499\", \"#92A68A\", \"#7B8F8A\", \"#506266\",\r\n\t\t  \"#2B222C\", \"#5E4352\", \"#965D62\", \"#C7956D\", \"#F2D974\",\r\n\t\t  \"#D4F7DC\", \"#DBE7B4\", \"#DBC092\", \"#E0846D\", \"#F51441\",\r\n\t\t  \"#A32C28\", \"#1C090B\", \"#384030\", \"#7B8055\", \"#BCA875\"];\r\n\t\t  export default colorArray;","\nimport './App.scss';\nimport React, {useState,useEffect} from 'react';\nimport colorArray from './color';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport { faQuoteLeft} from '@fortawesome/free-solid-svg-icons';\n\n\nlet quoteURL=\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\n\nfunction App() {\n  const [quote,setQuote]=useState(\"I’ve missed more than 9000 shots in my career. I’ve lost almost 300 games. 26 times I’ve been trusted to take the game winning shot and missed. I’ve failed over and over and over again in my life. And that is why I succeed.\");\n  const [author,setAuthor]=useState(\"Michael Jordan\");\n  const [randomNumber,setRandomNumber]=useState(0)\n  const [quotesArray,setQuotesArray]=useState(null)\n  const [newColor,setNewColor]=useState('#282c34')\n\n//Fetching quote from the data base asynchronously\n  const fetchQuotes= async(url)=>{\n    const response = await fetch(url)\n    const parseJSON = await response.json()\n    setQuotesArray(parseJSON.quotes)\n    \n\n  }\n\nuseEffect(()=>{\n  fetchQuotes(quoteURL)\n},[quoteURL])\n\n//generating random quote\nconst getRandomQuote=()=>{\n  let randomInt=Math.floor(quotesArray.length*Math.random())\n  setQuote(quotesArray[randomInt].quote)\n  setAuthor(quotesArray[randomInt].author)\n  setNewColor(colorArray[randomInt])\n}\n\nreturn(\n  <div className=\"App\" >\n    <header className=\"App-header\" style={{\n      backgroundColor:newColor,color:newColor}}>\n    <div id=\"quote-box\">\n       <p id=\"text\">\n       <FontAwesomeIcon icon={faQuoteLeft}/>    {quote}</p>\n       <p id=\"author\">- {author}</p>\n       <div className=\"button\">\n           <a id=\"tweet-quote\" style={{\n             backgroundColor:newColor }} href={encodeURI(`http://www.twitter.com/intent/tweet?text=${quote} -${author}`)}>\n             <FontAwesomeIcon icon={faTwitter}/>\n           </a>\n           <button id=\"new-quote\" onClick={()=>getRandomQuote()}\n             style={{\n          backgroundColor:newColor }}>New Quote</button>\n      </div>\n\n    </div>\n    </header>\n  </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}